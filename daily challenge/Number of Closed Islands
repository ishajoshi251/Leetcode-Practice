class Solution(object):
    def closedIsland(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        row = len(grid)
        col = len(grid[0])
        count = 0
        def dfs(r,c):
            if r < 0 or c < 0 or r >= row or c >= col:
                return False
            
            if grid[r][c] == 1:
                return True
            grid[r][c] = 1
            left = dfs(r, c-1)
            right = dfs(r, c+1)
            up = dfs(r-1, c)
            down = dfs(r+1, c)
            return left and right and up and down
            
            
        for i in range(row):
            for j in range(col):
                if grid[i][j] == 0 and dfs(i,j):
                    count += 1
        return count
